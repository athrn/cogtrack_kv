* Rename game_type to game_engine?
    * game_engine(game_settings) = game_session / game_instance?
    * game_factory(game_type, same_settings) = game_session / game_instance?           
* Save score to database / csv / google docs

* tags: multiple choice key-value pairs. Wellbeing, Alertness, Time of Day etc.

Sqlite backend:
* load_games
* add_game
* save_session

* Name the database file with the db version number cogtrack_v1.db
   * In the future, use upgrade scripts upgrade1to2.py to manage database changes
* App version number
   * N(.N)*{a|b|rc}N
   * <major version>.<minor version>.<patch> with separate db versioning
   * <major version>.<db version>.<patch>
   * <major version>.<minor version>.<db version>.<patch>
   * minor version for added compatible content
* Write dev notes / dev docs. Main components, game, maincontroller etc.

* google docs backend - not full backend. Only save score, do not load?

* NBack match/no_match color scheme. Green/Blue w red hue for errors?

* NBack score formatting

* NBack improved character generator.
   * Set N matches in M rounds.
   * Calculate required number of symbols for equal probability
   * Create random match positions and generate sequence with non-match/match depending on pos

* Save score
    * Note: Add 'stopped/cancelled/partial' tag to games that were stopped half way through.

* Cleanup / Reconsider
  * Game has callbacks and is_running logic which isn't necessary in the baseclass anymore

https://kivy.org/doc/stable/contribute-unittest.html
from kivy.tests.common import GraphicUnitTest, UnitTestTouch

* Better names for user interactions, callbacks and events. user_match
  * Signal/slot
  * Send/receive

* kivy unittesting is a hack.
* x Use deprecated interactive launcher or something else?
  * Use something else...
* Gui testing
** Add games
** Save score

* Icons and resource paths. Currently adding resource path in main. 



! Done

* Consider replacing all "include"s in kv files with load_file from python.
  * Every kv file has corresponding py file with load_file(__file__)
  * If b.kv depends on a.kv, b.py must include a.kv before loading b.kv
  * Pythons import mechanism will prevent double loading.
  * Some of Kivys path issues can be avoided.
  * Does not solve #:import of python stuff.

* x Testing. base.kv not found if running pytest from root directory and not gui directory.
** x Check out paths etc for finding kv files.

x Avoid import and include.
x Don't know why I can't import theme.py sometimes
x Sometimes base.kv isn't found or loaded multiple times...
x * Reconsider naming of TheApp/MainApp to avoid auto loading of kv file.
